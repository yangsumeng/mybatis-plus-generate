#** 获取主键pkField，多列主键不支持*#
#foreach($field in ${table.fields})
	#if(${field.keyFlag})
		#set($pkField=${field})
	#elseif(${logicDeleteFieldName}==${field.name})
		#set($logicDeleteField=${field})
	#elseif("create_by"==${field.name})
		#set($creatorField=${field})
	#elseif("update_by"==${field.name})
		#set($operatorField=${field})
	#elseif("update_time"==${field.name})
		#set($operateDateField=${field})
	#elseif("create_time"==${field.name})
        #set($createDateField=${field})
    #elseif("timestamp_version"==${field.name})
        #set($versionField=${field})
	#end
#end
package ${package.Controller};

import com.google.common.collect.Lists;
import com.***.***.***.aspect.OperatorLog;
import com.***.***.***.bean.AuthUserInfo;
import com.***.***.***.bean.WebResult;
import com.***.***.***.common.utils.OrikaMapper;
import com.***.***.***.utils.WebResultUtil;
import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.web.bind.annotation.*;

import javax.persistence.criteria.Predicate;
import java.util.Date;
import java.util.List;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import ${package.Form}.${table.formName};
import ${package.Vo}.${table.voName};

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 * @author ${author}
 * @since ${date}
 */
@Slf4j
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(value = "${table.entityPath}" , description = "${table.comment}【接口类】")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
	@Autowired
	private ${table.serviceName} ${table.entityPath}Service;

    private Specification<${entity}> whereSpec(final ${table.formName} ${table.entityPath}Form) {
        return (root, query, cb) -> {
            List<Predicate> predicates = Lists.newArrayList();
            if (${table.entityPath}Form.get${pkField.capitalName}() != null) {
                predicates.add(cb.equal(root.get("${pkField.name}"), ${table.entityPath}Form.get${pkField.capitalName}()));
            }
            if (${table.entityPath}Form.get${createDateField.capitalName}() != null) {
                predicates.add(cb.equal(root.get("${createDateField.name}"), ${table.entityPath}Form.get${createDateField.capitalName}()));
            }
            return cb.and(predicates.toArray(new Predicate[predicates.size()]));
        };
    }

	/**自动生成 ${date} $!{version}*/
	@ApiOperation(value = "按照id获取详情", notes = "获取${table.entityPath}详细信息")
	@ApiImplicitParam(name = "id", value = "主键ID", required = true, dataType = "Long", paramType = "path")
	@GetMapping("/{id}")
	public WebResult<${entity}> getById(@PathVariable("id") ${pkField.propertyType} id) {
		${entity} ${table.entityPath} = ${table.entityPath}Service.get(id);
        return WebResultUtil.genSuccessResult(${table.entityPath});
	}

	/**自动生成 ${date} $!{version}*/
	@ApiOperation(value="获取分页数据")
    @OperatorLog("${table.entityPath}新增")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "page", value = "当前页", required = true, paramType = "query"),
			@ApiImplicitParam(name = "size", value = "每页数", required = true, paramType = "query"),
            @ApiImplicitParam(name = "sort", dataType = "string", paramType = "query", value = "排序方式 asc|desc")
	})
	@GetMapping("/page")
	public WebResult<${table.voName}> getPage(@ModelAttribute ${table.formName} entity, Pageable pageable) {
        pageable.getSort().and(new Sort(Sort.Direction.DESC, "${pkField.name}"));
        AuthUserInfo authUserInfo = super.getAuthUserInfo();
		#if($logicDeleteField)
		if(null == params.get("$logicDeleteField.propertyName")){
			params.put("$logicDeleteField.propertyName", Constance.STATE_YES); 		//${field.comment}
		}
		#end
        Page<${entity}> data = ${table.entityPath}Service.findAll(whereSpec(entity), pageable);
		return WebResultUtil.genSuccessResult(${table.VoName}.builder().data(data).totalCount(data.getTotalElements()).build());
	}

	/**自动生成 ${date} $!{version}*/
	@ApiOperation(value="新增${table.entityPath}")
    @OperatorLog("${table.entityPath}新增")
    @PostMapping
	public WebResult addEntity(@RequestBody @ApiParam(name="param",value="参数JSON",required=true) ${table.formName} ${table.entityPath}Form) {
        ${entity} ${table.entityPath}Entity = OrikaMapper.map(${table.entityPath}Form, ${entity}.class);
	#if(${operateDateField})
		${table.entityPath}Entity.set${operateDateField.capitalName}(new Date());
	#end
	#if(${createDateField})
		${table.entityPath}Entity.set${createDateField.capitalName}(new Date());
	#end
	#if(${logicDeleteField})
		${table.entityPath}.set${logicDeleteField.capitalName}(Constance.STATE_YES);
	#end
        ${entity} result = ${table.entityPath}Service.save(${table.entityPath}Entity);
		if (null == result) {
			return WebResultUtil.genErrorResult("新增失败");
		}
		return WebResultUtil.genSuccessResult();
	}
	
	@ApiOperation(value="编辑${table.entityPath}")
    @OperatorLog("${table.entityPath}修改")
    @PutMapping
	public WebResult editEntity(@RequestBody @ApiParam(name="param",value="参数JSON",required=true) ${table.formName} ${table.entityPath}Form) {
        ${entity} ${table.entityPath} = OrikaMapper.map(${table.entityPath}Form, ${entity}.class);
		if(null == ${table.entityPath}.get${pkField.capitalName}()){
            return WebResultUtil.genErrorResult("主键为空："+"${pkField.propertyName}");
        }
	#if(${operateDateField})
		${table.entityPath}.set${operateDateField.capitalName}(new Date());
	#end
		${entity} result = ${table.entityPath}Service.update(${table.entityPath});
        if (null == result) {
        	return WebResultUtil.genErrorResult("修改失败");
        }
        return WebResultUtil.genSuccessResult();
	}

	/**自动生成 ${date} $!{version}*/
	@ApiOperation(value = "通过主键ID逻辑删除", notes = "逻辑删除$!{table.comment}实体")
	@ApiImplicitParam(name = "ids", value = "主键ID", required = true, dataType = "List", paramType = "query")
    @OperatorLog("通过主键ID逻辑删除")
	@DeleteMapping
	public WebResult delete(@RequestParam Long[] ids) {
        try {
            ${table.entityPath}Service.delete(Lists.newArrayList(ids));
        } catch (Exception e) {
            log.error("删除CP内容错误", e);
            return WebResultUtil.genErrorResult("删除失败");
        }
        return WebResultUtil.genSuccessResult();
     }
##	#if(${cfg.getLabelAndValueList})
##    /**自动生成 用于前端下拉框选择 ${date}  $!{version}*/
##    @ApiImplicitParams({
##		#foreach($field in ${table.fields})
##			#if(${field.name} != "state" && ${field.name} != "operator" && ${field.name} != "creator" && ${field.name} != "operate_date" && ${field.name} != "create_date")
##                    @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", paramType = "query"),
##			#end
##		#end
##            @ApiImplicitParam(name = "state", value = "状态", required = true, paramType = "query")
##    })
##    @GetMapping("getLabelAndValueList")
##    public ResponseEx<Object> getLabelAndValueList(
##		#foreach($field in ${table.fields})
##			#if(${field.name} != "state" && ${field.name} != "operator" && ${field.name} != "creator" && ${field.name} != "operate_date" && ${field.name} != "create_date")
##            @RequestParam(required = false) ${field.propertyType} ${field.propertyName},
##			#end
##		#end
##    		@RequestParam(required = false) int state) {
##		Map<String, Object> params = new HashMap<String, Object>(8);
##		#foreach($field in ${table.fields})
##			#if(${field.name} != "state" && ${field.name} != "operator" && ${field.name} != "creator" && ${field.name} != "operate_date" && ${field.name} != "create_date")
##		if(null != ${field.propertyName}) params.put("${field.propertyName}",${field.propertyName});
##			#end
##		#end
##        List<Map<String,Object>> list = ${table.entityPath}Service.getLabelAndValueList(params);
##		return ResponseEx.createSuccess(list);
##	}
##	#end
###if(${cfg.needEmptyMethod})
##	#foreach($monthName in ${cfg.emptyMethods})
###if(${monthName.endsWith("Page")})
##	/**自动生成 ${date}  $!{version}*/
##	@ApiOperation(value = "${monthName} 方法")
##    @ApiImplicitParams({
##            @ApiImplicitParam(name = "pageSize", value = "URL参数：每页显示数量", required = true, paramType = "query"),
##            @ApiImplicitParam(name = "pageIndex", value = "URL参数：当前页", required = true, paramType = "query")
##    })
##	@GetMapping("${monthName}")
##	public WebResult ${monthName}(@RequestParam int pageSize, @RequestParam int pageIndex){
##        Page page = new Page<>(pageIndex, pageSize);
##        List<Map<String,Object>> dataList = ${table.entityPath}Service.${monthName}(page,params);
##        return ResponsePageEx.createSuccess(dataList, page.getTotal(), page.getCurrent(), page.getSize(), page.getPages());
##	}
###else
##	/**自动生成 ${date}  $!{version}*/
##	@ApiOperation(value = "${monthName} 方法")
##	@GetMapping("${monthName}")
##	public ResponseEx<Object> ${monthName}(){
##        Map<String,Object> params = null;
##	    Object result = ${table.entityPath}Service.${monthName}(params);
##        return ResponseEx.createSuccess("成功");
##	}
###end
##
##	#end
###end
}
#end